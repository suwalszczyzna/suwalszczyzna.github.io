---
layout: post
title: "GIT - pigułka"
date: 2021-05-20 18:00:00 +0100
categories: tools
---

- [Git stages:](#git-stages)
- [Podstawowe komendy](#podstawowe-komendy)
- [Commitowanie, przeglądanie zmian](#commitowanie-przeglądanie-zmian)
- [Git Graph](#git-graph)
  - [utworzenie aliasu do GIT graph](#utworzenie-aliasu-do-git-graph)
- [Git diff](#git-diff)
- [Wycofywanie zmian](#wycofywanie-zmian)
  - [Rozbicie zmian na dwa commity](#rozbicie-zmian-na-dwa-commity)
  - [Poprawka ostatniego commita](#poprawka-ostatniego-commita)
- [Praca z gałęziami](#praca-z-gałęziami)
  - [Tworzenie gałęzi](#tworzenie-gałęzi)
  - [Informacje o gałęziach](#informacje-o-gałęziach)
    - [Listowanie gałęzi](#listowanie-gałęzi)
    - [Zmiana nazwy / usuwanie](#zmiana-nazwy--usuwanie)
- [Czyszczenie, scalanie, resetowanie, cherry-picking](#czyszczenie-scalanie-resetowanie-cherry-picking)
  - [Czyszczenie zmian - Git clean](#czyszczenie-zmian---git-clean)
  - [Scalanie zmian - Git merge](#scalanie-zmian---git-merge)
  - [Git reset](#git-reset)
  - [Git rebase](#git-rebase)
  - [Cherry-pick](#cherry-pick)
- [Praca ze zdalnym repo](#praca-ze-zdalnym-repo)
  - [Wypchnięcie zmian do zdalnego repo](#wypchnięcie-zmian-do-zdalnego-repo)
  - [Pobranie zmian ze zdalnego repo](#pobranie-zmian-ze-zdalnego-repo)
  - [Stworzenie lokalnej gałęzi na podstawie zdalnej](#stworzenie-lokalnej-gałęzi-na-podstawie-zdalnej)

## Git stages:
1. Working tree - aktualne zmiany, jeszcze nie dodane do staging area
2. Staging area - "poczekalnia", zmiany gotowe do zacommitowania
3. Local repo - zacommitowane zmiany, historia commitów

## Podstawowe komendy
`git init` - inizjalizacja nowego repo

`git status` - różnice pomiędzy przestrzeniami working tree, staging area i local repo

## Commitowanie, przeglądanie zmian

`git add <plik>` - dodanie zmian do z `working tree` do `staging area`

`git add -A` - dodanie wszystkich zmian do `staging area` wraz z usunięciami plików

`git commit -m "message"` - utworzenie commita (rewizji). Przeniesienie zmian ze `staging area` do `local repo`

`git show <commit>` - info o commicie - kto wrzucił, kiedy, jakie zmiany, do którego brancha. Bez podania id_commit pokaże info o ostatnim commicie

## Git Graph
`git log` - lista commitów

`git log --graph --oneline` - wyświetlenie grafu z podstawowymi informacji z aktualnej gałęzi

`git log --graph --oneline --all` - graf commitów całego repo

### utworzenie aliasu do GIT graph
`git config --global alias.gr "log --graph --oneline --all"` - utworzenie aliasu `git gr` dla wskazanej komendy.

## Git diff
`git diff` - różnice `working tree` -> `staging area`

`git diff --staged` - różnice `staging area` -> `local repo`

`git diff <commit>` - różnice `working tree` -> `konkretny commit`

## Wycofywanie zmian
`git reset NazwaPliku` - zastąpienie pliku z `local repo` do `staging area`

Wycofanie zmian z working tree:
`git checkout head NazwaPliku` - przywraca plik z `local repo` do `working tree oraz staging area`
W powyższym poleceniu:
    `head` - to konkretny commit, tutaj najświeży, na którego wskazuje head

`git checkout -- NazwaPliku` - przywrócenie zmian, jeśli tego pliku nie ma jeszcze w `local repo`

### Rozbicie zmian na dwa commity
1. `git add --path NazwaPliku` 
2. Decydujemy czy dodać wyświetlane zmiany do `staging area`. Jeśli zmiany są zbyt blisko siebie to wybieramy `e`.
3. Otwiera się edytor plików. Decydujemy które zmiany mają wejść na stage
4. Po zapisaniu zmiany w edytowanym pliku, wchodzą one OD RAU do `staging area`. Nie potrzeba wywoływać polecenia `git add`
5. Commitujemy zmiany
6. W `working tree` pozostają zmiany, które normalnie dodajemy poleceniem `git add NazwaPliku` + robimy commit

### Poprawka ostatniego commita 
`git commit --amend` - dopisuje zmiany ze staging area do ostatniego commita. W historii nie widać nowego commita.

## Praca z gałęziami

`git checkout <commit>` - przesunięcie wskaźnika HEAD do wskazanego commita. 

> UWAGA: Po tej operacji znajdujemy się wtedy w stanie `detached head`. Czyli stanie, kiedy znacznik HEAD nie wskazuje na żaden branch.

`git checkout <branch>` - przesunięcie HEAD do wskaźnika brancha.


### Tworzenie gałęzi
`git branch nazwa-brancha <opc. id_commita>` - tworzy nowego brancha. NIE PRZESUWA WSKAŹNIKA HEAD!

`git checkout nazwa-brancha` - przesuwa wskaźnik HEAD na wskazany branch


*Najlepszy sposób na tworzenie brancha:*
*`git checkout -b nazwa-brancha` - tworzy nowego brancha i przesuwa wskaźnik HEAD*


### Informacje o gałęziach

#### Listowanie gałęzi
`git branch` - lista gałęzi

`git branch --list feature/c*` - lista gałęzi zaczynających się na frazę `feature/c`

`git branch --merged master` - lista gałęzi domergowanych do gałęzi master

`git branch --no-merged master` - nie domergowane do gałęzi master

#### Zmiana nazwy / usuwanie
Zmiana nazwy:
`git branch -m stara-nazwa nowa-nazwa`

`git branch -d` - usunięcie brancha. Jeśli nie jest domergowany do innego to git go nie usunie

`git branch -D` - usunięcie brancha, nawet jeśli nie jest zmergowany z innym.

## Czyszczenie, scalanie, resetowanie, cherry-picking

### Czyszczenie zmian - Git clean
`git clean -nd` - czyszczenie "na niby". Pokazuje, które pliki będą usunięte

`git clean -fd` - czyszczenie "na serio". Usuwa pliki nieśledzone

### Scalanie zmian - Git merge
`git merge nazwa-brancha` - merge into current. Git sam wybiera czy będzie to ff merge czy three-way merge.

`git merge --no-ff nazwa-brancha` - merge bez możliwości fast-forward merge

`git merge --abort` - przerwanie mergowania (np podczas wystąpienia konfliktów, których nie mamy czasu teraz rozwiązać)

`git merge --continue` - kontynowanie merga po rozwiązaniu konfliktów
### Git reset
`git reset <commit>` - domyślnie z parametrem `--mixed`. Przesuwa wskaxnik brancha i head do wskazanego commita. 

- parametr: `--hard` - przenosi zmiany z `local repo` do `staging area` oraz `working tree`
- parametr: `--mixed` - przenosi zmiany z `locl repo` do `staging area`
- parametr: `--soft` - nie przenosi żadnych zmian. W `working tree` oraz `staging` area zostają stare zmiany.

`git reset --hard nazwa-brancha~2` - zresetowanie zmian o 2 commity do tyłu

`git revert -n <commit>` - odwrócenie konkretnego commita. Tworzy nowy commit z odwróconymi zmianami.


### Git rebase
Polecenie `git rebase master` modyfikuje historię. Przesuwa początek naszego brancha do ostatniej zmiany wykonanej na branchu `master`, z którego powstał. Dzięki temu, jeśli pracujemy na naszej gałęzi długo, a inni domergują zmiany do mastera to możemy te zmiany mieć u siebie - bez potrzeby tworzenia nowej gałęzi.

![Git rebase]({{ BASE_PATH }}/assets/post_images/git_rebase.png "Git rebase")

### Cherry-pick
`git cherry-pick -n <commit>` - bierze zmiany ze wskazanego commita i wrzuca do working tree naszego brancha. Flaga `-n` oznacza `no-commit`. Zamiany nie zostaną zacommitowane w nowym branchu. Bez tej flagi przeniesie się cały commit.

![Git cherry-pick]({{ BASE_PATH }}/assets/post_images/cherry_pick.png "Git cherry-pick")

Przykładowy scenariusz użycia:
Zacommitowaliśmy zmiany w nie tym branchu co trzeba. 
- Przełączamy się na nową gałąź
- Robimy cherry-pick na commicie z poprzedniej gałęzi
- Pracujemy na nowej gałęzi lub robimy commit
- Wracamy do poprzedniej gałęzi i robimy git reset o jeden commit do tyłu, aby pozbyć się duplikatu kodu.

## Praca ze zdalnym repo

### Wypchnięcie zmian do zdalnego repo
`git push origin nazwa-lokalnego-brancha` - wypycha do zdalnego repozytorium `origin` lokalny branch.

### Pobranie zmian ze zdalnego repo
`git fetch origin` - ściągnięcie zdalnych gałęzi i commitów.

>Uwaga: ten zabieg jeszcze nie pozwala pracować na świeżym repo. Trzeba wykonać `git merge` aby zmergować swoją lokalną gałąź ze zmianami pobranymi z origin. Zamiast `fetch` można użyć `pull`, który wykona tą operację za nas

`git pull origin master` - wykonają się następujące czynności:

1. `git fetch origin master` - pobranie zdalnej gałęzi `master`
2. `git merge` - fast-forward merge starej wersji lokalnej gałęzi master do nowych zmian

### Stworzenie lokalnej gałęzi na podstawie zdalnej
`git checkout -b feature/zakupy origin/feature/zakupy` - git zakłada lokalną gałąź `feature/zakupy` na podstawie zdalnej oraz zapisuje tracking.

*Najlepszy sposób:*
*`git checkout -t origin/master` - automatycznie tworzy lokalną gałąź o nazwie `master`*
